name: Test Package Registry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-packages:
    name: Test Package Installation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Setup Cachix (if available)
      uses: cachix/cachix-action@v12
      with:
        name: otivo-ot
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        
    - name: Test flake check
      run: nix flake check -L --accept-flake-config --impure
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
      
    - name: Test package build
      run: nix build .#otivo-tool -L --accept-flake-config --impure
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
      
    - name: Test package metadata
      run: |
        nix show-derivation .#otivo-tool --accept-flake-config --impure | jq '.[] | {pname: .env.pname, version: .env.version}'
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
        
    - name: Test package run (basic check)
      run: |
        # Test that the package can be invoked (will show placeholder message without cache)
        nix run .#otivo-tool --accept-flake-config --impure -- --help || echo "Expected: binary not available without cache substitution"
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
        
    - name: Test direct installation
      run: |
        # Test profile installation
        nix profile install .#otivo-tool --accept-flake-config --impure
        echo "Profile installation successful"
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
        
    - name: Test development shell
      run: |
        nix develop --accept-flake-config --impure -c echo "Development shell works"
      env: 
        NIXPKGS_ALLOW_UNFREE: 1

  test-overlay:
    name: Test Package Overlay
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Test overlay functionality
      run: |
        # Test that overlay exports work
        nix eval .#overlays.default --accept-flake-config --impure --apply 'overlay: "Overlay loaded successfully"'
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
        
    - name: Test overlay integration
      run: |
        # Create a test flake that uses our overlay
        cat > test-overlay.nix << 'EOF'
        let
          pkgs = import <nixpkgs> { 
            overlays = [ (import ./overlays/default.nix) ]; 
            config.allowUnfree = true;
          };
        in {
          otivo-tool = pkgs.otivo-tool.pname;
          ot-alias = pkgs.ot.pname;
        }
        EOF
        
        nix eval --impure --expr 'import ./test-overlay.nix' --json
      env: 
        NIXPKGS_ALLOW_UNFREE: 1

  test-cross-platform:
    name: Cross-platform Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Test package availability on all platforms
      run: |
        # Test that packages are available for all platforms
        platforms=("x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin")
        
        for platform in "${platforms[@]}"; do
          echo "Testing platform: $platform"
          nix eval .#packages.$platform.otivo-tool.meta.platforms --accept-flake-config --impure --json | jq .
        done
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
        
    - name: Verify flake outputs
      run: |
        nix flake show --accept-flake-config --impure --json | jq '.packages | keys' | grep -E "(x86_64-linux|aarch64-linux|x86_64-darwin|aarch64-darwin)"
      env: 
        NIXPKGS_ALLOW_UNFREE: 1
